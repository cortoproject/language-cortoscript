'scopeName': 'source.corto'
'name': 'Cortoscript'
'fileTypes': ['corto', 'cx']
'patterns': [
  {
    'include': '#comment'
  }
  {
    'include': '#keywords'
  }
  {
    'include': '#function'
  }
  {
    'include': '#initializer'
  }
  {
    'include': '#declaration'
  }
  {
    'include': '#literal'
  }
  {
    'include': '#operator'
  }
  {
    'include': '#variable'
  }
]
'repository':
  'comment':
    'patterns': [
      {
        'begin': '//'
        'end': '\\n'
        'name': 'comment.line'
      }
      {
        'begin': '/\\*'
        'end': '\\*/'
        'name': 'comment.line'
      }
    ]

  'initializer':
    'patterns': [
      {
        'begin': '\\=[ ]+\\{'
        'end':'}'
        'patterns': [
          {
            'match': '([^:^,]*):'
            'captures':
              '1':
                'name': 'support.variable'
          }
          {
            'include': '#literal'
          }
          {
            'include': '#keywords'
          }
        ]
      }
    ]

  'declaration':
    'patterns': [
      {
        'match': '\\b([a-zA-Z_\\.\\/][a-zA-Z0-9_\\.\\/]*\\&?)( )+([a-zA-Z_][a-zA-Z0-9_]*)\\b'
        'captures':
          '1':
            'name': 'storage.type'
      }
    ]

  'function':
    'patterns': [
      {
        'begin': '(init|construct|define|validate|update|delete|destruct|deinit)\\('
        'end': '\\)'
        'captures':
          '1':
            'name': 'support.type.lifecycle_hook'
        'patterns': [
          {
            'include': '#keywords'
          }
        ]
      }
      {
        'begin': '([A-Za-z_][A-Za-z0-9_]*)\\('
        'end': '\\)'
        'captures':
          '1':
            'name': 'entity.name.function'
        'patterns': [
          {
            'include': '#keywords'
          }
        ]
      }
    ]

  'variable':
    'match': '\\b(this)\\b'
    'name': 'support.variable'

  'literal':
    'patterns': [
      {
        'match': '\\b(0x)?[1-9][0-9]*(\\.[0-9]+)?((e|E)(\\+|-)[0-9]+)?\\b'
        'name': 'constant.numeric'
      }
      {
        'match': '"([^\"])*"'
        'captures':
          '0':
            'name': 'string.quoted.double'
      }
      {
        'match': '\'([^\'])*\''
        'name': 'string.quoted.single'
      }
      {
        'match': '\\b(true|false|and|or|null)\\b'
        'name': 'constant.other.symbol'
      }
    ]

  'keywords':
    'patterns': [
      {
        'match': '\\b(in|out|inout|use|as|typesystem)\\b'
        'name': 'storage.type'
      }
      {
        'match': '\\b(object|void|any)\\b'
        'name': 'storage.type.void'
      }
      {
        'match': '\\b(octet|word|bool|char|uint8|uint16|uint32|uint64|int8|int16|int32|int64|float32|float64|string)\\b'
        'name': 'storage.type.primitive'
      }
      {
        'match': '\\b(interface|struct|class|container|leaf|table|target|range|procedure)\\b'
        'name': 'support.type.composite'
      }
      {
        'match': '\\b(collection|array|sequence|list|map)\\b'
        'name': 'support.type.collection'
      }
      {
        'match': '\\b(function|method|delegate|override|overridable|subscriber|observer|mount)\\b'
        'name': 'support.type.procedure'
      }
      {
        'match': '\\b(iterator)\\b'
        'name': 'support.type.iterator'
      }
      {
        'match': '\\b(bitmask|enum)\\b'
        'name': 'support.type.constants'
      }
      {
        'match': '\\b(application|package|member|alias|case|default)\\b'
        'name': 'support.type.other'
      }
      {
        'match': '\\b(private|const|readonly|local|global|hidden|key|not_null)\\b'
        'name': 'support.constant.modifier'
      }
      {
        'match': '\\b(declare|define|update|delete|resume|suspend|on_self|on_scope|on_tree)\\b'
        'name': 'support.constant.mask'
      }
      {
        'match': '\\b(declared|valid|deleted)\\b'
        'name': 'support.constant.state'
      }
      {
        'match': '\\b(attr_named|attr_persistent|attr_writable|attr_observable|attr_default)\\b'
        'name': 'support.constant.attr'
      }
      {
        'match': '\\|'
        'name': 'keyword.control'
      }
    ]

  'operator':
    'patterns': [
      {
        'match': '\\:|\\;|\\.|\\/'
        'name': 'keyword.operator'
      }
    ]
